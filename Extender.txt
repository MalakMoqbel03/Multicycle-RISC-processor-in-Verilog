module Extender (
    input [7:0] Imm_in8,   // First 8-bit input
    input [4:0] Imm_in5,   // Second 5-bit input
    input [1:0] ExtOp,     // 2-bit signal to choose the extension mode
    input ExtM,            // 0 for zero extension, 1 for sign extension
    output reg [15:0] Imm_out
);

    always @(*) begin
        case (ExtOp)
            2'b00: begin
                // Zero extend the first 8-bit input to 16 bits
                Imm_out = {8'b0, Imm_in8};
            end
            2'b01: begin
                // Sign extend the second 5-bit input to 16 bits
                Imm_out = {{11{Imm_in5[4]}}, Imm_in5};
            end
            2'b10: begin
                // Check ExtM signal for the second 5-bit input
                if (ExtM == 0) begin
                    // Zero extension
                    Imm_out = {11'b0, Imm_in5};
                end else begin
                    // Sign extension
                    Imm_out = {{11{Imm_in5[4]}}, Imm_in5};
                end
            end
            2'b11: begin
                // Sign extend the second 5-bit input to 16 bits
                Imm_out = {{11{Imm_in5[4]}}, Imm_in5};
            end
            default: begin
                // Default case to handle undefined ExtOp values
                Imm_out = 16'b0;
            end
        endcase
    end

endmodule
