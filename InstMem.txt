module instructionMemory (
    input wire clock,
    input wire [15:0] address,
    output reg [15:0] instruction
);
    reg [15:0] mem [0:255];

    always @(posedge clock) begin
        instruction <= mem[address];
    end

    initial begin
        // Initialize the instruction memory with your provided instructions
        mem[0] = 16'h6421;   
        mem[1] = {4'b0001, 3'b010, 3'b011, 5'd20};    // R2 = R3 + 20
        mem[2] = {4'b0010,  3'b011, 3'b001, 3'b010};   // R3 = R1 & R2
        mem[3] = {4'b0000,  3'b100, 3'b001, 3'b010};   // R4 = R1 + R2
        mem[4] = {4'b0000,  3'b011, 3'b010, 3'b001};   // R3 = R2 - R1

        // Commented instructions for further use:
        // mem[5] = {ADDI, 3'b111, 3'b010, 5'd10}; // R15 = R2 + 10
        // mem[6] = {ADDI, 3'b001, 3'b011, 5'd20}; // R1 = R3 + 20
        // mem[7] = {BGT,  3'b111, 3'b001, 5'd0};  // BGT not Taken
        // mem[5] = {LW,   3'b1001, 3'b001, 5'd30}; // LW R9, 30(R1)
        // mem[6] = {ADDI, 3'b011, 3'b100, 5'd40};  // R11 = R12 + 40
        // mem[7] = {ADDI, 3'b1011, 3'b1010, 5'd15}; // R13 = R5 + 15
        // mem[8] = {SW,   3'b1101, 3'b1010, 5'd100}; // SW R13, 100(R5)

        // BGT Taken
        // mem[4] = {BGT,  3'b001, 3'b111, 5'd15};  // BGT
        // mem[5] = {ADDI, 3'b101, 3'b110, 5'd10};  // R5 = R6 + 10
        // mem[4] = {BLT,  3'b111, 3'b1000, 5'd13}; // BLT
        // mem[5] = {ADDI, 3'b1001, 3'b1010, 5'd15}; // R9 = R10 + 15

        // J-Type Instructions
        // mem[24] = {JMP,  12'd29};  // JMP
        // mem[25] = {CALL, 12'd26};  // CALL
        // mem[26] = {RET,  12'd0};   // RET
        // mem[27] = {PUSH, 3'b001, 8'b0}; // PUSH R1
        // mem[28] = {POP,  3'b010, 8'b0}; // POP R2
        // mem[29] = {ADDI, 3'b011, 3'b100, 5'd40}; // R3 = R4 + 40
    end
endmodule
